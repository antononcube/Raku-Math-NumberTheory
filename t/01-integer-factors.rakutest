#!/usr/bin/env raku
use v6.d;

use Test;

use lib <. lib>;
use Math::NumberTheory;

plan *;

## 1
subtest {
    is gcd-gaussian(10 + 15i, -3 + 2i) ∈ (2 + 3i, -3 + 2i), True;
    is (10 + 15i) gcd (-3 + 2i) ∈ (2 + 3i, -3 + 2i), True;
    is (10 + 15i) gcd 25, 0 - 5i;
    is 105 gcd (7 + 49i), 7 + 14i;
    is (10 + 15i) gcd 25, 25 gcd (10 + 15i);
}, 'GCD for Gaussian integers';

## 2
subtest {
    is gcd-rational(1 / 3, 1 / 5), 1 / 15;
    is gcd-rational(1 / 3, 2 / 5), 1 / 15;
    is gcd-rational(1 / 546, 2 / 980), 1 / 19110;
    is gcd-rational(1 / 3, 2 / 5, 1 / 7), 1 / 105;
    is 1 / 3 gcd 2 / 5, 1 / 15;
    is 1 / 3 gcd 2 / 5 gcd 1 / 7, 1 / 105;
}, 'GCD for Rationals';

## 3
subtest {
    is lcm-gaussian(-4 + 5i, 2 + 3i) ∈ (23 + 2i, -2 + 23i), True;
    is ((-4 + 5i) lcm (2 + 3i)) ∈ (23 + 2i, -2 + 23i), True;
    is ((10 + 15i) lcm 25) ∈ (50 + 75i, -75 + 50i), True;
    is 105 lcm (7 + 49i), 315 + 105i;
    is (10 + 15i) lcm 25, 25 lcm (10 + 15i);
}, 'LCM for Gaussian integers';

## 4
is-deeply factor-integer(11).Array, [(11, 1),];

## 5
is-deeply factor-integer(1).Array, [(1, 1),];

## 6
my $n3 = 30;
is ([*] factor-integer($n3).map({ $_.head ** $_.tail })), $n3;

## 7
is-deeply factor-integer(120).Array, [(2, 3), (3, 1), (5, 1)];

## 8
subtest {
    my $n = factorial(20);
    is factor-integer($n, 3).elems, 3;
    is factor-integer($n, 3, method => 'trial').elems ≤ 3, True;
    is factor-integer(20 ** 4, 5).elems ≤ 5, True;
    is factor-integer(20 ** 4, 5, method => 'trial').elems ≤ 5, True;
}, "max number of factors";

### 9
#is-deeply
#        factor-integer(120, :gaussian-integers).Array,
#        [(1 + i, 6), (1 + 2i, 1), (2 + i, 1), (3, 1)];

done-testing;